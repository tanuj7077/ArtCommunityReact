{"version":3,"sources":["components/HomePage/PostList.js"],"names":["PostList","useReducer","state","action","type","images","concat","fetching","imgData","imgDispatch","page","pager","pagerDispatch","useEffect","fetch","then","data","json","catch","e","bottomBoundaryRef","useRef","scrollObserver","useCallback","node","IntersectionObserver","entries","forEach","en","intersectionRatio","console","log","observe","current","className","columnsCountBreakPoints","350","600","750","900","1000","map","post","name","id","style","border","ref"],"mappings":"6KAsJeA,UAhJE,WACf,IADqB,EAmBUC,sBAlBZ,SAACC,EAAOC,GACzB,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,2BAAKF,GAAZ,IAAmBG,OAAQH,EAAMG,OAAOC,OAAOH,EAAOE,UACxD,IAAK,kBACH,OAAO,2BAAKH,GAAZ,IAAmBK,SAAUJ,EAAOI,WACtC,QACE,OAAOL,KAWyC,CACpDG,OAAQ,GACRE,UAAU,IArBS,mBAmBdC,EAnBc,KAmBLC,EAnBK,OAuBUR,sBAZX,SAACC,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,2BAAKF,GAAZ,IAAmBQ,KAAMR,EAAMQ,KAAO,IACxC,QACE,OAAOR,KAO0C,CACrDQ,KAAM,IAxBa,mBAuBdC,EAvBc,KAuBPC,EAvBO,KA2BrBC,qBAAU,WACRJ,EAAY,CAAEL,KAAM,kBAAmBG,UAAU,IACjDO,MAAM,qEAAD,OACkEH,EAAMD,KADxE,cAGFK,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACV,GACLI,EAAY,CAAEL,KAAM,eAAgBC,WACpCI,EAAY,CAAEL,KAAM,kBAAmBG,UAAU,OAElDW,OAAM,SAACC,GAGN,OADAV,EAAY,CAAEL,KAAM,kBAAmBG,UAAU,IAC1CY,OAEV,CAACV,EAAaE,EAAMD,OAGvB,IAAIU,EAAoBC,iBAAO,MACzBC,EAAiBC,uBACrB,SAACC,GACC,IAAIC,sBAAqB,SAACC,GACxBA,EAAQC,SAAQ,SAACC,GACXA,EAAGC,kBAAoB,IACzBjB,EAAc,CAAER,KAAM,iBACtB0B,QAAQC,IAAIpB,EAAMD,aAGrBsB,QAAQR,KAEb,CAACZ,IAiEH,OA9DAC,qBAAU,WACJO,EAAkBa,SACpBX,EAAeF,EAAkBa,WAElC,CAACX,EAAgBF,IA2DlB,sBAAKc,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,sBACA,cAAC,oBAAD,CACEC,wBAAyB,CAAEC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAM,GADnE,SAGE,cAAC,IAAD,UACGhC,EAAQH,OAAOoC,KAAI,SAACC,GACnB,OAAO,cAAC,IAAD,eAAgCA,GAAfA,EAAKC,aAIlCnC,EAAQD,UAAY,sBAAM2B,UAAU,cAAhB,wBACrB,qBACEU,GAAG,uBACHC,MAAO,CAAEC,OAAQ,0BACjBC,IAAK3B","file":"static/js/5.ef31efb5.chunk.js","sourcesContent":["import React, { useEffect, useReducer, useCallback, useRef } from \"react\";\r\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\";\r\n\r\nimport SinglePost from \"./SinglePost\";\r\nimport { useGlobalContext } from \"../../context\";\r\n\r\nconst PostList = () => {\r\n  const imgReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case \"STACK_IMAGES\":\r\n        return { ...state, images: state.images.concat(action.images) };\r\n      case \"FETCHING_IMAGES\":\r\n        return { ...state, fetching: action.fetching };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  const pageReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case \"ADVANCE_PAGE\":\r\n        return { ...state, page: state.page + 1 };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  const [imgData, imgDispatch] = useReducer(imgReducer, {\r\n    images: [], //state\r\n    fetching: true, //action\r\n  });\r\n  const [pager, pagerDispatch] = useReducer(pageReducer, {\r\n    page: 1, //state\r\n  });\r\n\r\n  useEffect(() => {\r\n    imgDispatch({ type: \"FETCHING_IMAGES\", fetching: true });\r\n    fetch(\r\n      `https://shielded-woodland-79171.herokuapp.com/posts/postList?page=${pager.page}&limit=12`\r\n    )\r\n      .then((data) => data.json())\r\n      .then((images) => {\r\n        imgDispatch({ type: \"STACK_IMAGES\", images });\r\n        imgDispatch({ type: \"FETCHING_IMAGES\", fetching: false });\r\n      })\r\n      .catch((e) => {\r\n        // handle error\r\n        imgDispatch({ type: \"FETCHING_IMAGES\", fetching: false });\r\n        return e;\r\n      });\r\n  }, [imgDispatch, pager.page]);\r\n\r\n  // implement infinite scrolling with intersection observer\r\n  let bottomBoundaryRef = useRef(null);\r\n  const scrollObserver = useCallback(\r\n    (node) => {\r\n      new IntersectionObserver((entries) => {\r\n        entries.forEach((en) => {\r\n          if (en.intersectionRatio > 0) {\r\n            pagerDispatch({ type: \"ADVANCE_PAGE\" });\r\n            console.log(pager.page);\r\n          }\r\n        });\r\n      }).observe(node);\r\n    },\r\n    [pagerDispatch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (bottomBoundaryRef.current) {\r\n      scrollObserver(bottomBoundaryRef.current);\r\n    }\r\n  }, [scrollObserver, bottomBoundaryRef]);\r\n\r\n  /*const { posts, setPosts, page, setPage } = useGlobalContext();\r\n\r\n  const [limit, setLimit] = useState(12);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchPosts = async () => {\r\n    setLoading(true);\r\n    let baseUrl = \"http://localhost:8000/posts/postList\";\r\n    const urlPage = `?page=${page}`;\r\n    const urlLimit = `&limit=${limit}`;\r\n    let url = `${baseUrl}${urlPage}${urlLimit}`;\r\n    try {\r\n      console.log(page);\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      setPosts((oldPhotos) => {\r\n        //return [...oldPhotos, ...data];\r\n        var arr = [];\r\n        data.forEach((item) => {\r\n          if (!oldPhotos.includes(item)) {\r\n            arr.push(item);\r\n          }\r\n        });\r\n        return [...oldPhotos, ...arr];\r\n      });\r\n      setLoading(false);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(error);\r\n    }\r\n  };*/\r\n  /*useEffect(() => {\r\n    fetchPosts();\r\n  }, [page]);\r\n\r\n  useEffect(() => {\r\n    const event = window.addEventListener(\"scroll\", () => {\r\n      if (\r\n        (!loading && window.innerHeight + window.scrollY) >=\r\n        document.body.scrollHeight - 10\r\n      ) {\r\n        console.log(\"page = \", page);\r\n        console.log(\r\n          \"(page + 1) * limit - limit = \",\r\n          (page + 1) * limit - limit\r\n        );\r\n        console.log(\"postLength = \", posts.length);\r\n        setPage((oldPage) => {\r\n          return oldPage + 1;\r\n        });\r\n      }\r\n    });\r\n    return () => window.removeEventListener(\"scroll\", event);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);*/\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"subHeading\">Discover</div>\r\n      <ResponsiveMasonry\r\n        columnsCountBreakPoints={{ 350: 1, 600: 2, 750: 2, 900: 3, 1000: 4 }}\r\n      >\r\n        <Masonry>\r\n          {imgData.images.map((post) => {\r\n            return <SinglePost key={post.name} {...post} />;\r\n          })}\r\n        </Masonry>\r\n      </ResponsiveMasonry>\r\n      {imgData.fetching && <span className=\"loadingAnim\">Loading...</span>}\r\n      <div\r\n        id=\"page-bottom-boundary\"\r\n        style={{ border: \"10px solid transparent\" }}\r\n        ref={bottomBoundaryRef}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n"],"sourceRoot":""}